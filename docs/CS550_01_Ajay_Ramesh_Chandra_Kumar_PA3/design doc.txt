Design Document
 
We have used the Java Sockets to implement for the interprocess communication in our Gnutella File Sharing System. We have kept the TTL to 7 by default which will decrement when it hops from one hop to another .

Program design :

Each peer contains :
1. A client thread (peer acting as a client, ie, sending requests to other peers)
2. A server thread (peer acting as server I.e, accepting request from other peers)
3. a watcher thread (to monitor events on the peers master folder and notify neighbors when there is a change)
4. A pull thread

Each peer also maintains :
1. query messages it has seen
2. queryhit messages it has seen
3. invalidation messages it has seen
4. all files residing on the peer and their metadata
5. all its neighbors (initialized on bootup from the peer configuration file)


PUSH BASED:
1. On the peer bootup, a watcher thread is created to monitor the peerâ€™s master folder.
2. the watcher thread continously monitors the folder for any changes, and send out a message to the peer when any file is modified/deleted/created.
3. Peer upon receiving the notification update the metadata of the files it is holding and send out an INVALIDATION message to all its neighbor about the changes.
4. Peer upon receiving the INVALIDATION message, if the file was downloaded from the peer before, the file is marked as stale. And again the message is forwarded to all its neighbors.


PULL BASED:


Use case supported:
1. lookup for a file by entering the file name.
2. download a file by entering file name, peer address and port from where to downloaded.
3. Refresh a stale file
